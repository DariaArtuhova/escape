{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { getCurrentQuest, getCurrentQuestBooking, loadMyBooking, loadQuests } from '../store/quest/quest-action';\nimport { ApiRoute, AuthorizationStatus } from '../const';\nimport { requireAuthorization, setError, setUserEmail } from '../store/user/user-action';\nimport { dropToken, saveToken } from './token';\nimport { store } from '../store';\nexport const clearErrorAction = createAsyncThunk('offer/clearError', () => {\n  setTimeout(() => store.dispatch(setError(null)), 2000);\n});\nexport const fetchMyBooking = createAsyncThunk('data/loadQuests', async (_arg, _ref) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref;\n  const {\n    data\n  } = await api.get(ApiRoute.MyBooking);\n  dispatch(loadMyBooking(data));\n});\nexport const fetchQuestsAction = createAsyncThunk('data/loadQuests', async (_arg, _ref2) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref2;\n  const {\n    data\n  } = await api.get(ApiRoute.Quests);\n  dispatch(loadQuests(data));\n});\nexport const fetchCurrentQuestAction = createAsyncThunk('data/getCurrentQuest', async (questId, _ref3) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref3;\n  const {\n    data\n  } = await api.get(`${ApiRoute.Quests}/${questId}`);\n  dispatch(getCurrentQuest(data));\n});\nexport const fetchCurrentQuestBooking = createAsyncThunk('data/getCurrentQuest', async (questId, _ref4) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref4;\n  const {\n    data\n  } = await api.get(`${ApiRoute.Quests}/${questId}${ApiRoute.Booking}`);\n  dispatch(getCurrentQuestBooking(data));\n});\nexport const checkAuthAction = createAsyncThunk('user/checkAuth', async (_arg, _ref5) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref5;\n  try {\n    const {\n      data\n    } = await api.get(ApiRoute.Login);\n    dispatch(setUserEmail(data.email));\n    dispatch(requireAuthorization(AuthorizationStatus.Auth));\n  } catch {\n    dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n  }\n});\nexport const loginAction = createAsyncThunk('user/login', async (_ref6, _ref7) => {\n  let {\n    login: email,\n    password\n  } = _ref6;\n  let {\n    dispatch,\n    extra: api\n  } = _ref7;\n  const {\n    data: {\n      token\n    }\n  } = await api.post(ApiRoute.Login, {\n    email,\n    password\n  });\n  saveToken(token);\n  dispatch(requireAuthorization(AuthorizationStatus.Auth));\n  dispatch(setUserEmail(email));\n});\nexport const logoutAction = createAsyncThunk('user/logout', async (_arg, _ref8) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref8;\n  await api.delete(ApiRoute.Logout);\n  dropToken();\n  dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n});\nexport const sendNewBooking = createAsyncThunk('data/sendBooking', async (_ref9, _ref10) => {\n  let {\n    date,\n    time,\n    questId,\n    locationId,\n    peopleCount,\n    phone,\n    withChildren,\n    contactPerson\n  } = _ref9;\n  let {\n    dispatch,\n    extra: api\n  } = _ref10;\n  await api.post(`${ApiRoute.Quests}/${questId}${ApiRoute.Booking}`, {\n    date,\n    time,\n    questId,\n    locationId,\n    peopleCount,\n    phone,\n    withChildren,\n    contactPerson\n  });\n  dispatch(fetchMyBooking());\n});\nexport const deleteMyBooking = createAsyncThunk('data/loadQuests', async (reservationId, _ref11) => {\n  let {\n    dispatch,\n    extra: api\n  } = _ref11;\n  await api.delete(`${ApiRoute.MyBooking}/${reservationId}`);\n  dispatch(fetchMyBooking());\n});","map":{"version":3,"names":["createAsyncThunk","getCurrentQuest","getCurrentQuestBooking","loadMyBooking","loadQuests","ApiRoute","AuthorizationStatus","requireAuthorization","setError","setUserEmail","dropToken","saveToken","store","clearErrorAction","setTimeout","dispatch","fetchMyBooking","_arg","extra","api","data","get","MyBooking","fetchQuestsAction","Quests","fetchCurrentQuestAction","questId","fetchCurrentQuestBooking","Booking","checkAuthAction","Login","email","Auth","NoAuth","loginAction","login","password","token","post","logoutAction","delete","Logout","sendNewBooking","date","time","locationId","peopleCount","phone","withChildren","contactPerson","deleteMyBooking","reservationId"],"sources":["/Users/daria/Desktop/ escape/project/src/services/api-actions.ts"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { AxiosInstance } from 'axios';\nimport {AppDispatch, Store} from '../types/store';\nimport {getCurrentQuest, getCurrentQuestBooking, loadMyBooking, loadQuests} from '../store/quest/quest-action';\nimport {\n  AuthData, BookingQuest,\n  BookingType,\n  QuestsType,\n  QuestType, UserData\n} from '../types/booking-type';\nimport {ApiRoute, AuthorizationStatus} from '../const';\nimport {requireAuthorization, setError, setUserEmail} from '../store/user/user-action';\nimport {dropToken, saveToken} from './token';\nimport {store} from '../store';\n\nexport const clearErrorAction = createAsyncThunk(\n  'offer/clearError',\n  () => {\n    setTimeout(\n      () => store.dispatch(setError(null)),\n      2000,\n    );\n  },\n);\n\nexport const fetchMyBooking = createAsyncThunk<void, undefined, {\n  dispatch: AppDispatch;\n  state: Store;\n  extra: AxiosInstance;\n}> (\n  'data/loadQuests',\n  async (_arg, {dispatch, extra: api}) => {\n\n    const {data} = await api.get<BookingType[]>(ApiRoute.MyBooking);\n\n    dispatch(loadMyBooking(data));\n  }\n);\n\nexport const fetchQuestsAction = createAsyncThunk<void, undefined, {\n  dispatch: AppDispatch;\n  state: Store;\n  extra: AxiosInstance;\n}> (\n  'data/loadQuests',\n  async (_arg, {dispatch, extra: api}) => {\n\n    const {data} = await api.get<QuestsType>(ApiRoute.Quests);\n\n    dispatch(loadQuests(data));\n  }\n);\n\nexport const fetchCurrentQuestAction = createAsyncThunk<void, number, {\n  dispatch: AppDispatch;\n  state: Store;\n  extra: AxiosInstance;\n}> (\n  'data/getCurrentQuest',\n  async (questId, {dispatch, extra: api}) => {\n\n    const {data} = await api.get<QuestType>(`${ApiRoute.Quests}/${questId}`);\n\n    dispatch(getCurrentQuest(data));\n  }\n);\n\nexport const fetchCurrentQuestBooking = createAsyncThunk<void, number, {\n  dispatch: AppDispatch;\n  state: Store;\n  extra: AxiosInstance;\n}> (\n  'data/getCurrentQuest',\n  async (questId, {dispatch, extra: api}) => {\n\n    const {data} = await api.get<BookingType>(`${ApiRoute.Quests}/${questId}${ApiRoute.Booking}`);\n\n    dispatch(getCurrentQuestBooking(data));\n  }\n);\n\nexport const checkAuthAction = createAsyncThunk<void, undefined, {\n  dispatch: AppDispatch;\n  state: Store;\n  extra: AxiosInstance;\n}>(\n  'user/checkAuth',\n  async (_arg, {dispatch, extra: api}) => {\n    try {\n      const {data} = await api.get<UserData>(ApiRoute.Login);\n      dispatch(setUserEmail(data.email));\n      dispatch(requireAuthorization(AuthorizationStatus.Auth));\n    } catch {\n      dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n    }\n  },\n);\n\nexport const loginAction = createAsyncThunk<void, AuthData, {\n  dispatch: AppDispatch;\n  state: Store;\n  extra: AxiosInstance;\n}>(\n  'user/login',\n  async ({login: email, password}, {dispatch, extra: api}) => {\n    const {data: {token}} = await api.post<UserData>(ApiRoute.Login, {email, password});\n    saveToken(token);\n    dispatch(requireAuthorization(AuthorizationStatus.Auth));\n    dispatch(setUserEmail(email));\n  },\n);\n\nexport const logoutAction = createAsyncThunk<void, undefined, {\n  dispatch: AppDispatch;\n  state: Store;\n  extra: AxiosInstance;\n}>(\n  'user/logout',\n  async (_arg, {dispatch, extra: api}) => {\n    await api.delete(ApiRoute.Logout);\n    dropToken();\n    dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n  },\n);\n\nexport const sendNewBooking = createAsyncThunk<void, BookingQuest, {\n  dispatch: AppDispatch;\n  state: Store;\n  extra: AxiosInstance;\n}>(\n  'data/sendBooking',\n  async ({date, time, questId, locationId, peopleCount, phone, withChildren, contactPerson}, {dispatch, extra: api}) => {\n\n    await api.post<BookingType>(`${ApiRoute.Quests}/${questId}${ApiRoute.Booking}`, {date, time, questId, locationId, peopleCount, phone, withChildren, contactPerson});\n    dispatch(fetchMyBooking());\n  }\n);\n\nexport const deleteMyBooking = createAsyncThunk<void, number, {\n  dispatch: AppDispatch;\n  state: Store;\n  extra: AxiosInstance;\n}> (\n  'data/loadQuests',\n  async (reservationId, {dispatch, extra: api}) => {\n\n    await api.delete<BookingType[]>(`${ApiRoute.MyBooking}/${reservationId}`);\n\n    dispatch(fetchMyBooking());\n  }\n);\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}