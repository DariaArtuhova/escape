{"ast":null,"code":"var _jsxFileName = \"/Users/daria/Desktop/ escape/project/src/components/quest-list/quest-list.tsx\",\n  _s = $RefreshSig$();\nimport { Quest } from '../quest/quest';\nimport { useAppSelector } from '../../store';\nimport { FilterLevel, FilterType } from '../../const';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function QuestList(_ref) {\n  _s();\n  let {\n    quests\n  } = _ref;\n  const typeFilter = useAppSelector(state => state.quest.filterType);\n  const levelFilter = useAppSelector(state => state.quest.filterLevel);\n  switch (typeFilter) {\n    case FilterType.Adventures:\n      quests = quests.filter(quest => quest.type.startsWith('adventures'));\n      break;\n    case FilterType.Horror:\n      quests = quests.filter(quest => quest.type.startsWith('horror'));\n      break;\n    case FilterType.Mystic:\n      quests = quests.filter(quest => quest.type.startsWith('mystic'));\n      break;\n    case FilterType.Detective:\n      quests = quests.filter(quest => quest.type.startsWith('detective'));\n      break;\n    case FilterType.SciFi:\n      quests = quests.filter(quest => quest.type.startsWith('sci-fi'));\n      break;\n    case FilterType.All:\n      break;\n    default:\n      break;\n  }\n  switch (levelFilter) {\n    case FilterLevel.Easy:\n      quests = quests.filter(quest => quest.level.startsWith('easy'));\n      break;\n    case FilterLevel.Medium:\n      quests = quests.filter(quest => quest.level.startsWith('medium'));\n      break;\n    case FilterLevel.Hard:\n      quests = quests.filter(quest => quest.level.startsWith('hard'));\n      break;\n    case FilterLevel.All:\n      break;\n    default:\n      break;\n  }\n  if (quests.length !== 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-grid\",\n      children: quests.map(quest => /*#__PURE__*/_jsxDEV(Quest, {\n        quest: quest\n      }, quest.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 32\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041F\\u043E \\u0434\\u0430\\u043D\\u043D\\u044B\\u043C \\u0444\\u0438\\u043B\\u044C\\u0442\\u0440\\u0430\\u043C \\u043D\\u0435\\u0442 \\u043A\\u0432\\u0435\\u0441\\u0442\\u043E\\u0432\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(QuestList, \"Q7oSgpBsrKaVGKCIyJOwyehWmXs=\", false, function () {\n  return [useAppSelector, useAppSelector];\n});\n_c = QuestList;\nvar _c;\n$RefreshReg$(_c, \"QuestList\");","map":{"version":3,"names":["Quest","useAppSelector","FilterLevel","FilterType","QuestList","quests","typeFilter","state","quest","filterType","levelFilter","filterLevel","Adventures","filter","type","startsWith","Horror","Mystic","Detective","SciFi","All","Easy","level","Medium","Hard","length","map","id"],"sources":["/Users/daria/Desktop/ escape/project/src/components/quest-list/quest-list.tsx"],"sourcesContent":["import {Quest} from '../quest/quest';\nimport {useAppSelector} from '../../store';\nimport { QuestType} from '../../types/booking-type';\nimport {FilterLevel, FilterType} from '../../const';\n\ntype QuestProps = {\n  quests: QuestType[];\n}\n\nexport function QuestList({quests}:QuestProps) : JSX.Element {\n\n  const typeFilter = useAppSelector((state) => state.quest.filterType);\n  const levelFilter = useAppSelector((state) => state.quest.filterLevel);\n\n  switch (typeFilter) {\n    case FilterType.Adventures:\n      quests = quests.filter((quest) => quest.type.startsWith('adventures'));\n      break;\n    case FilterType.Horror:\n      quests = quests.filter((quest) => quest.type.startsWith('horror'));\n      break;\n    case FilterType.Mystic:\n      quests = quests.filter((quest) => quest.type.startsWith('mystic'));\n      break;\n    case FilterType.Detective:\n      quests = quests.filter((quest) => quest.type.startsWith('detective'));\n      break;\n    case FilterType.SciFi:\n      quests = quests.filter((quest) => quest.type.startsWith('sci-fi'));\n      break;\n    case FilterType.All:\n      break;\n    default:\n      break;\n  }\n\n  switch (levelFilter) {\n    case FilterLevel.Easy:\n      quests = quests.filter((quest) => quest.level.startsWith('easy'));\n      break;\n    case FilterLevel.Medium:\n      quests = quests.filter((quest) => quest.level.startsWith('medium'));\n      break;\n    case FilterLevel.Hard:\n      quests = quests.filter((quest) => quest.level.startsWith('hard'));\n      break;\n    case FilterLevel.All:\n      break;\n    default:\n      break;\n  }\n\n  if (quests.length !== 0) {\n    return (\n      <div className=\"cards-grid\">\n        {quests.map((quest) => <Quest quest={quest} key={quest.id}/>)}\n      </div>\n    );\n  } else {\n    return (\n      <h1>По данным фильтрам нет квестов</h1>\n    );\n  }\n}\n"],"mappings":";;AAAA,SAAQA,KAAK,QAAO,gBAAgB;AACpC,SAAQC,cAAc,QAAO,aAAa;AAE1C,SAAQC,WAAW,EAAEC,UAAU,QAAO,aAAa;AAAC;AAMpD,OAAO,SAASC,SAAS,OAAoC;EAAA;EAAA,IAAnC;IAACC;EAAiB,CAAC;EAE3C,MAAMC,UAAU,GAAGL,cAAc,CAAEM,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACC,UAAU,CAAC;EACpE,MAAMC,WAAW,GAAGT,cAAc,CAAEM,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACG,WAAW,CAAC;EAEtE,QAAQL,UAAU;IAChB,KAAKH,UAAU,CAACS,UAAU;MACxBP,MAAM,GAAGA,MAAM,CAACQ,MAAM,CAAEL,KAAK,IAAKA,KAAK,CAACM,IAAI,CAACC,UAAU,CAAC,YAAY,CAAC,CAAC;MACtE;IACF,KAAKZ,UAAU,CAACa,MAAM;MACpBX,MAAM,GAAGA,MAAM,CAACQ,MAAM,CAAEL,KAAK,IAAKA,KAAK,CAACM,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,CAAC;MAClE;IACF,KAAKZ,UAAU,CAACc,MAAM;MACpBZ,MAAM,GAAGA,MAAM,CAACQ,MAAM,CAAEL,KAAK,IAAKA,KAAK,CAACM,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,CAAC;MAClE;IACF,KAAKZ,UAAU,CAACe,SAAS;MACvBb,MAAM,GAAGA,MAAM,CAACQ,MAAM,CAAEL,KAAK,IAAKA,KAAK,CAACM,IAAI,CAACC,UAAU,CAAC,WAAW,CAAC,CAAC;MACrE;IACF,KAAKZ,UAAU,CAACgB,KAAK;MACnBd,MAAM,GAAGA,MAAM,CAACQ,MAAM,CAAEL,KAAK,IAAKA,KAAK,CAACM,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,CAAC;MAClE;IACF,KAAKZ,UAAU,CAACiB,GAAG;MACjB;IACF;MACE;EAAM;EAGV,QAAQV,WAAW;IACjB,KAAKR,WAAW,CAACmB,IAAI;MACnBhB,MAAM,GAAGA,MAAM,CAACQ,MAAM,CAAEL,KAAK,IAAKA,KAAK,CAACc,KAAK,CAACP,UAAU,CAAC,MAAM,CAAC,CAAC;MACjE;IACF,KAAKb,WAAW,CAACqB,MAAM;MACrBlB,MAAM,GAAGA,MAAM,CAACQ,MAAM,CAAEL,KAAK,IAAKA,KAAK,CAACc,KAAK,CAACP,UAAU,CAAC,QAAQ,CAAC,CAAC;MACnE;IACF,KAAKb,WAAW,CAACsB,IAAI;MACnBnB,MAAM,GAAGA,MAAM,CAACQ,MAAM,CAAEL,KAAK,IAAKA,KAAK,CAACc,KAAK,CAACP,UAAU,CAAC,MAAM,CAAC,CAAC;MACjE;IACF,KAAKb,WAAW,CAACkB,GAAG;MAClB;IACF;MACE;EAAM;EAGV,IAAIf,MAAM,CAACoB,MAAM,KAAK,CAAC,EAAE;IACvB,oBACE;MAAK,SAAS,EAAC,YAAY;MAAA,UACxBpB,MAAM,CAACqB,GAAG,CAAElB,KAAK,iBAAK,QAAC,KAAK;QAAC,KAAK,EAAEA;MAAM,GAAMA,KAAK,CAACmB,EAAE;QAAA;QAAA;QAAA;MAAA,QAAG;IAAC;MAAA;MAAA;MAAA;IAAA,QACzD;EAEV,CAAC,MAAM;IACL,oBACE;MAAA,UAAI;IAA8B;MAAA;MAAA;MAAA;IAAA,QAAK;EAE3C;AACF;AAAC,GAtDevB,SAAS;EAAA,QAEJH,cAAc,EACbA,cAAc;AAAA;AAAA,KAHpBG,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}